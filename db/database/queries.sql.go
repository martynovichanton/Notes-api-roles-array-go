// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const createNote = `-- name: CreateNote :exec
INSERT INTO notes (user_id, content) VALUES ($1, $2)
`

type CreateNoteParams struct {
	UserID  int64
	Content string
}

// Note Queries
func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) error {
	_, err := q.db.ExecContext(ctx, createNote, arg.UserID, arg.Content)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, password, roles, active) VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	Username string
	Password string
	Roles    []string
	Active   bool
}

// User Queries
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Password,
		pq.Array(arg.Roles),
		arg.Active,
	)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE id = $1 AND user_id = $2
`

type DeleteNoteParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteNote(ctx context.Context, arg DeleteNoteParams) error {
	_, err := q.db.ExecContext(ctx, deleteNote, arg.ID, arg.UserID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getNotes = `-- name: GetNotes :many
SELECT id, user_id, content, created_at, updated_at FROM notes
`

func (q *Queries) GetNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, getNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotesByUserID = `-- name: GetNotesByUserID :many
SELECT id, user_id, content, created_at, updated_at FROM notes WHERE user_id = $1
`

func (q *Queries) GetNotesByUserID(ctx context.Context, userID int64) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, getNotesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotesByUserIDWithUserNames = `-- name: GetNotesByUserIDWithUserNames :many
SELECT notes.id, notes.user_id, notes.content, users.username
FROM notes
INNER JOIN users ON users.id=notes.user_id WHERE user_id = $1
`

type GetNotesByUserIDWithUserNamesRow struct {
	ID       int64
	UserID   int64
	Content  string
	Username string
}

func (q *Queries) GetNotesByUserIDWithUserNames(ctx context.Context, userID int64) ([]GetNotesByUserIDWithUserNamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotesByUserIDWithUserNames, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotesByUserIDWithUserNamesRow
	for rows.Next() {
		var i GetNotesByUserIDWithUserNamesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotesWithUserNames = `-- name: GetNotesWithUserNames :many
SELECT notes.id, notes.user_id, notes.content, users.username
FROM notes
INNER JOIN users ON users.id=notes.user_id
`

type GetNotesWithUserNamesRow struct {
	ID       int64
	UserID   int64
	Content  string
	Username string
}

func (q *Queries) GetNotesWithUserNames(ctx context.Context) ([]GetNotesWithUserNamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotesWithUserNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotesWithUserNamesRow
	for rows.Next() {
		var i GetNotesWithUserNamesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, roles, active FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		pq.Array(&i.Roles),
		&i.Active,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, roles, active FROM users
`

type GetUsersRow struct {
	ID       int64
	Username string
	Roles    []string
	Active   bool
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			pq.Array(&i.Roles),
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes SET content = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 AND user_id = $3
`

type UpdateNoteParams struct {
	Content string
	ID      int64
	UserID  int64
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateNote, arg.Content, arg.ID, arg.UserID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET username = $1, password = $2, roles = $3, active = $4 WHERE id = $5
`

type UpdateUserParams struct {
	Username string
	Password string
	Roles    []string
	Active   bool
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Password,
		pq.Array(arg.Roles),
		arg.Active,
		arg.ID,
	)
	return err
}
